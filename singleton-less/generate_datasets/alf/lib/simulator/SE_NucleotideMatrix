module external SE_NucleotideMutate;


# mutate
# 23 Aug. 2011: changed to in-place mutate. DD
NucleotideMutate:=proc(seq1:string,time:{positive, list(positive)}; 
                       (lnM1=Q):matrix, classes:array(posint), 
                       (neutral=true):boolean)
    if not assigned(lnM1) then
        error('Q is not assigned.')
    fi;
    if type(time, list) and assigned(classes) then
        return(NucleotideMutateGamma(seq1, time, lnM1, classes, neutral)):
    elif type(time, list) or assigned(classes) then
        error('for gamma model NucleotideMutate requires a list of distances '.
              'and an array with the class assignment for each site'):
    fi:
    MP:=exp(time*lnM1);
    for i from 2 to length(MP) do
    MP[i]:=MP[i]+MP[i-1];
    od;
    MP:=transpose(MP);
    len:=length(seq1);
    #seq2:='';
#    seq2 := CreateString(len,'X'):
    if neutral then
        for i to len do
            n0:=NucToNInt(seq1[i]);
            n:=RandomNucleotide(MP[n0]):
            seq1[i] := n;
        od;
    else
        for i to len by 3 do
            c := CreateString(3,'X'):
            do
                n0 := NucToNInt(seq1[i]):
                c[1] := RandomNucleotide(MP[n0]):
                n0 := NucToNInt(seq1[i+1]):
                c[2] := RandomNucleotide(MP[n0]):
                n0 := NucToNInt(seq1[i+2]):
                c[3] := RandomNucleotide(MP[n0]):
                if CodonToInt(c) <> 22 then break fi:
            od:
            seq1[i] := c[1]:
            seq1[i+1] := c[2]:
            seq1[i+2] := c[3]:
        od:
    fi:
    seq1;
end:

NucleotideMutateGamma:=proc(seq1:string,time:list(positive), lnM1:matrix, 
                            classes:array(posint); (neutral=true):boolean)
    option internal;
    # prepare matrices for the different gamma classes
    MP := CreateArray(1..length(time),0):
    for i to length(MP) do
        MP[i]:=exp(time[i]*lnM1);
    od:
    
    for j to length(MP) do
        for i from 2 to length(MP[j]) do
        MP[j,i]:=MP[j,i]+MP[j,i-1];
        od;
        MP[j]:=transpose(MP[j]);
    od:

    # now mutate
    len:=length(seq1);
#    seq2:='';
#    seq2 := CreateString(len,'X'):
    if neutral then
        for i to len do
            n0:=NucToNInt(seq1[i]);
            n:=RandomNucleotide(MP[classes[i], n0]):
            seq1[i] := n;
        od;
    else
        for i to len by 3 do
            c := CreateString(3,'X'):
            do
                n0 := NucToNInt(seq1[i]):
                c[1] := RandomNucleotide(MP[classes[(i+2)/3], n0]):
                n0 := NucToNInt(seq1[i+1]):
                c[2] := RandomNucleotide(MP[classes[(i+2)/3], n0]):
                n0 := NucToNInt(seq1[i+2]):
                c[3] := RandomNucleotide(MP[classes[(i+2)/3], n0]):
                if CodonToInt(c) <> 22 then break fi:
            od:
            seq1[i] := c[1]:
            seq1[i+1] := c[2]:
            seq1[i+2] := c[3]:
        od:    
    fi:
    seq1;
end:


#######################################################
# Return a random nucleotide. The input is the vector #
# with cumulated nucleotide probabilities. (f[i]      #
# gives the probability of a nucleotide being on of   #
# nucleotide 1 to i.)                                 #
#######################################################
RandomNucleotide:=proc(CumFreq:array(numeric)) option internal;
    do
        ind:=SearchOrderedArray(Rand(),CumFreq) + 1;
        if ind<=4 then
          	c:=NIntToNuc(ind);
          	break;
          fi;
    od:
    c;
end:

end: # module