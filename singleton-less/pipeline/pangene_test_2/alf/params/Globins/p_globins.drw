# parameters for synthetic evolution approach
# 
# Christophe Dessimoz, Daniel Margadant; CBRG; 2005
# changed by Sereina Riniker, 2006
# changed by dd, 5.9.08

Set(gc=2e7): SetRandSeed(); # Set(quiet):

# start parameters
protStart := 100;      # number of proteins first organism have
gammaLengthDist := [1, 1]; # parameters for the gene length distribution (~Gamma(k, theta))
minGeneLength := 144; # minimum length of a gene

# web request will prefix path to custom matrix file with /tmp/DarwinService/uploadedFiles/
webRequest := false:
uuid := '':

### substitution models
## model definition
# available models: nucleotide substitution: F84, GTR, HKY, TN93
#                   codon substitution: CPAM, ECM, ECMu, M0, M2, M3, M8, CustomC
#                   aa substitution: GCB, JTT, LG, WAG, CustomP
#
# format: SubstitutionModel(name:string, parameters:list, frequencies:list, neutralDNA:boolean)
#     the number of arguments required depend on the model:
#     models CPAM, ECM, ECMu, GCB, JTT, WAG and LG require just the name of the model
#     when using a custom matrix, pass the path to the matrix file as parameter
#     for M-series models, pass also the codon frequencies
#     finally, for nucleotide models specify as fourth parameter whether non-sense mutations should be allowed
#
# order of parameters:
#     for custom empirical models: parameters[1] should contain a path to a matrix in PAML format
#     for M-series models:   kappa = parameters[1]
#                            omega = parameters[2] (single value or list)
#                            P     = parameters[3] (probabilities of w-class[es]) 
#                            p     = parameters[4] (for M8, 1st parameter of beta distribution)
#                            q     = parameters[5] (for M8, 2nd parameter of beta distribution)
#     for nucleotide models: GTR: a..f  = parameters[1]..parameters[6]
#                            HKY: alpha = parameters[1], beta = parameters[2]
#                            F84: kappa = parameters[1], beta = parameters[2]
#                            TN93: alpha1 = parameters[1], alpha2 = parameters[2], beta = parameters[3]
substModels := [
SubstitutionModel('M3', [2.79270, [0.05264, 0.64914, 0.04512], [0.71614, 0.15421]], [0.00930677, 0.02838565, 0.03108820, 0.02400073, 0.00656384, 0.02001972, 0.02192576, 0.01692714, 0.00432886, 0.01320303, 0.01446006, 0.01116347, 0.00905844, 0.02762824, 0.03025867, 0.02336032, 0.00624442, 0.01904549, 0.02085877, 0.01610340, 0.00440404, 0.01343232, 0.01471119, 0.01135734, 0.00290447, 0.00885863, 0.00970205, 0.00749018, 0.00607780, 0.01853730, 0.02030220, 0.01567372, 0.01217379, 0.03713005, 0.04066513, 0.03139432, 0.00858588, 0.02618693, 0.02868014, 0.02214166, 0.00566240, 0.01727031, 0.01891459, 0.01460245, 0.01184896, 0.03613931, 0.03958007, 0.03055663, 0, 0.01506727, 0, 0.01273972, 0.00348412, 0.01062658, 0.01163832, 0.00898502, 0, 0.00700824, 0.00767548, 0.00592563, 0.00480827, 0.01466523, 0.01606148, 0.01239979]),
SubstitutionModel('M3', [2.79270, [0.05264, 0.64914, 1],       [0.71614, 0.15421]], [0.00930677, 0.02838565, 0.03108820, 0.02400073, 0.00656384, 0.02001972, 0.02192576, 0.01692714, 0.00432886, 0.01320303, 0.01446006, 0.01116347, 0.00905844, 0.02762824, 0.03025867, 0.02336032, 0.00624442, 0.01904549, 0.02085877, 0.01610340, 0.00440404, 0.01343232, 0.01471119, 0.01135734, 0.00290447, 0.00885863, 0.00970205, 0.00749018, 0.00607780, 0.01853730, 0.02030220, 0.01567372, 0.01217379, 0.03713005, 0.04066513, 0.03139432, 0.00858588, 0.02618693, 0.02868014, 0.02214166, 0.00566240, 0.01727031, 0.01891459, 0.01460245, 0.01184896, 0.03613931, 0.03958007, 0.03055663, 0, 0.01506727, 0, 0.01273972, 0.00348412, 0.01062658, 0.01163832, 0.00898502, 0, 0.00700824, 0.00767548, 0.00592563, 0.00480827, 0.01466523, 0.01606148, 0.01239979])
]:

## model selection
# supply an array of frequencies of models 1..n defined above for random assignment
# supply an array of of length protStart with model assignments for each initial gene
modelAssignments := [1]:
#modelAssignments := [0.75, 0.25]:
## model switch
# matrix with probabilitis of switch from model i to model j after speciation/duplication
# a switch is not possible between  M-series and non M-series models
modelSwitchS := [[1,0],[0,1]]:
modelSwitchD := [[1,0],[0,1]]:
###

### parameters for gap model
indelModel := 'ZIPF';         # ZIPF, NEGBIN, QG, CUSTOM
indelVector := []:          # define a custom indel distribution here
 Z_c := 1.821:             # exponent of Zipfian distribution
 QG_c := 300:              # c parameter for generalized Qian-Goldstein model in PAM (see Pang et al. BMC Bioinformatics, 6:235 2005)
 QG_t := 50:              # c parameter for generalized Qian-Goldstein model in PAM (see Pang et al. BMC Bioinformatics, 6:235 2005)
 NB_r := 1:                # r parameter for negative binomial model (must be positive integer)
 NB_q := 0.5:              # q parameter for negative binomial model (0 < q < 1):
###

# GC content amelioration
enableGCAmelioration := false:

### tree parameters
treeType := 'Custom':       # BDTree, ToLSample, Custom
scaleTree := false:          # scale tree to match Pam distance defined below (parameter mutRate)
birthRate := 0.01:            # b parameter
deathRate := 0.001:             # d parameter
NSpecies := 10:            # number of species in the tree (for BD and ToL)

treeFile := 'globins_tree.drw':             # if using custom tree, specify path to tree file
###


# probabilities and evolution parameters
mutRate := 100;        # estimate PAM distance from origin to recent species
amongGeneDistr := 'None': # distribution of rates among genes. Use 'None' for no variation or 'Custom'
                           # for using custom rates from file stored at aGPath.
aGAlpha := 1:              # Shape parameter of among gene distribution. The mean is always moved to 1
                           # in order to keep the mean branch length.
aGPath := '/home/ddalquen/synthetic-evolution/customRates.drw': # path to file with custom rates (see example file)
amongSiteDistr := 'Gamma'; # distribution of rates (Gamma or Poisson)
                             # 'Poisson' generates a random number of domains (at most areas) per
                             # gene with rates drawn from a Poisson distribution around the mean
                             # rate (given by mutRate). motifFreq defines the fraction of domains
                             # with mutation rate 0 (motif).
                             # 'Gamma' uses gamma rates. The number of bins is defined by the areas
                             # parameter. Additionally, motifs occur with frequency motifFreq.
                             # If user-defined rates are given, this option is ignored.
                             # For M-series models this option is ignored and replaced with the classes of the model
areas := 5;                  # maximal number of areas with different mutRate within a gene
motifFreq := 0.00:           # rate for of invariable sites
alphaG := 1;                 # alpha parameter of gamma function

### parameters for gene duplication
geneDuplRate := 0.000;    # rate that gene duplication occurs
  transDupl := 0.5;     # ratio of tranlocation after duplication
  numberDupl := 5;     # maximal number of genes involved in one duplication
  fissionDupl := 0;   # rate of fission after duplication of a single gene
  fusionDupl := 0;    # rate of fusion of two genes after duplication
## duplicate evolves as pseudogene  
  P_pseudogene := 0.2: # probability of duplicate becoming a pseudogene
  ratefac_pseudogene := 0.9: # rate change in case of pseudogene
## duplicate evolves under neofunctionalization
  P_neofunc := 0.5:          # probability of duplicate undergoing neofunctionalization
  ratefac_neofunc := 1.5:    # rate change in case of neofunctionalization
  life_neofunc := 10:        # life of increased rate (time to normalization of rate)
## both copies evolving by subfunctionalization
  P_subfunc := 0.3:           # probability of both genes undergoing subfunctionalization
  ratefac_subfunc := 1.2:     # rate change in case of subfunctionalization
  life_subfunc := 10:         # life of rate change (time to normalization of rate)
  
  
### parameters for gene loss  
geneLossRate := 0.000;    # rate that gene loss occurs
  numberLoss := 5:    # maximal number of genes involved in one duplication

lgtRate := 0.000;         # rate that single lateral gene transfer occurs
  orthRep := 0;       # how much of the transfer will be orthologous
                       # replacement (rest is novel gene acquisition)
lgtGRate := 0.0000;	       # rate that lateral gene transfer of groups occurs
  lgtGSize := 10;      # number of genes which are transferred in one go
  
invers := 0.000;	       # rate that gene inversion occurs
  invSize := 1;        # number of genes which are inversed in one go
transloc := 0.00;	       # rate that gene translocation occurs
  transSize := 1;      # number of genes which are translocated in one go
invtrans := 0.10;	       # rate that inversed translocation occurs

fissionRate := 0;      # rate of gene fissions without prior duplication
fusionRate := 0;       # rate of gene fusions occuring without prior duplication of fused genes
  numberFusion := 3:

aaGainRate := 0.000;       # rate that a gene gains 1 aa, p for single genes
aaLossRate := 0.000;       # rate that a gene loses 1 aa, p for single genes
maxIndelLength := 5;   # maximal length of indels
delsAcrossDomains := false:

# parameters for additional features
realseed := false;     # real genome db as first organism
realorganism := '/home/darwin/v2/source/bio-recipes/Orthologues/dan/'.
                'synthetic-evolution/realseed/se-LUCA.db';
specialAreas := false; # user defined domains
areaPath := '/home/darwin/v2/source/bio-recipes/Orthologues/dan/'.
                'synthetic-evolution/areaSet.drw';

# simulation name
mname := 'globins_new'; 

# directories for file storage
wdir := '/Users/ddalquen/Documents/se-data/';
dbdir := 'DB/';
dbAncdir := 'DBancestral/';
allalldir := 'AllAll/';

